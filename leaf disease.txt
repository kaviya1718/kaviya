import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Activation, Dropout, Flatten, Dense
from keras.preprocessing.image import ImageDataGenerator
from keras.utils import img_to_array,load_img
from PIL import Image
from glob import glob
#from google.colab import drive
#drive.mount('/content/drive')
#data_dir = "/content/drive/MyDrive/DiseaseImage"
#/content/drive/MyDrive/FoodImage/train
train_dir = "train"
test_dir = "valid"
DiseaseImg = os.listdir(train_dir)
number_of_class = (len(DiseaseImg))
print("Total Leaf Diseases Images classes are: {}".format(number_of_class))
items = []
NumberOfDiseaseImg = 0
 #= os.listdir(DiseaseImg)
nums = {}
for item in DiseaseImg:
    #print(item)
    nums[item] = len(os.listdir(train_dir +'/'+ item))
    if item in items:
        items.append(item)

print(nums)
print(nums)

img_per_class = pd.DataFrame(nums.values(), index=nums.keys(), columns=["no. of images"])
img_per_class
# plotting number of images available for each disease items
index = [n for n in range(len(DiseaseImg))]
plt.figure(figsize=(20, 5))
plt.bar(index, [n for n in nums.values()], width=0.3)
plt.xlabel('Items/DiseaseImg', fontsize=10)
plt.ylabel('No of images available', fontsize=10)
plt.xticks(index, DiseaseImg, fontsize=5, rotation=90)
plt.title('Images per each class of diseases')
n_train = 0
for value in nums.values():
    n_train += value
print(f"There are {n_train} images for training")
#Displaying the image
img = load_img(train_dir + "/Apple___Black_rot/00e909aa-e3ae-4558-9961-336bb0f35db3___JR_FrgE.S 8593.jpg", target_size=(224,224))
plt.figure()
plt.imshow(img)
plt.axis("off")
plt.show()
#Printing the shape of the image array
x = img_to_array(img)
print(x.shape)
#Creating the model
model = Sequential()
model.add(Conv2D(32,(3,3),input_shape = x.shape))
model.add(Activation("relu"))
model.add(MaxPooling2D())
model.add(Conv2D(32,(3,3)))
model.add(Activation("relu"))
model.add(MaxPooling2D())
model.add(Conv2D(64,(3,3)))
model.add(Activation("relu"))
model.add(MaxPooling2D())
model.add(Flatten())
model.add(Dense(1024))
model.add(Activation("relu"))
model.add(Dropout(0.4))
model.add(Dense(number_of_class))
model.add(Activation("softmax"))

#Compiling the model
model.compile(loss = "categorical_crossentropy",
optimizer = "rmsprop",
metrics = ["accuracy"])

#Getting model's summary
model.summary()

model.save_weights('DiseaseImage_CNN_model.h5')
#Specifing epochs & batch size
epochs = 5
batch_size = 3
#Creating an object of ImageDataGenerator.
train_datagen = ImageDataGenerator(rescale= 1./255,
shear_range = 0.3,
horizontal_flip=True,
zoom_range = 0.3)

test_datagen = ImageDataGenerator(rescale= 1./255)

#Generating batches of Augmented data.
train_generator = train_datagen.flow_from_directory(
directory = train_dir,
target_size= x.shape[:2],
batch_size = batch_size,
color_mode= "rgb",
class_mode= "categorical")

test_generator = test_datagen.flow_from_directory(
directory = test_dir,
target_size= x.shape[:2],
batch_size = batch_size,
color_mode= "rgb",
class_mode= "categorical")
#Fitting the model
hist = model.fit_generator(
generator = train_generator,
steps_per_epoch = n_train//batch_size,
epochs=epochs,
validation_data = test_generator,
validation_steps = 150//batch_size)
print(hist.history)
#Plotting train & validation loss
plt.figure()
plt.plot(hist.history["loss"],label = "Train Loss", color = "black")
plt.plot(hist.history["val_loss"],label = "Validation Loss", color = "mediumvioletred", linestyle="dashed",markeredgecolor = "purple", markeredgewidth = 2)
plt.title("Model Loss", color = "darkred", size = 13)
plt.legend()
plt.show()
#Plotting train & validation accuracy
plt.figure()
plt.plot(hist.history["accuracy"],label = "Train Accuracy", color = "black")
plt.plot(hist.history["val_accuracy"],label = "Validation Accuracy", color = "mediumvioletred", linestyle="dashed",markeredgecolor = "purple", markeredgewidth = 2)
plt.title("Model Accuracy", color = "darkred", size = 13)
plt.legend()
plt.show()
print(test_generator.class_indices)
#Displaying the selected image
img = load_img(test_dir + "/Blueberry___healthy/0d7d3829-d9be-44c4-8407-ff13b52f5c43___RS_HL 5098_newPixel25.jpg", target_size=(224,224))
plt.imshow(img)
plt.axis("off")
plt.show()
#Loading the image
def load(filename):
    np_image = Image.open(test_dir + "/Blueberry___healthy/0d7d3829-d9be-44c4-8407-ff13b52f5c43___RS_HL 5098_newPixel25.jpg")
    np_image = np_image.resize((224,224))
    np_image = np.array(np_image).astype('float32')/255
    np_image = np.expand_dims(np_image, axis=0)
    return np_image

image = load(img)
#Predicting the class
prediction = (np.argmax(model.predict(image), axis=-1))
print(DiseaseImg[int(prediction)])


